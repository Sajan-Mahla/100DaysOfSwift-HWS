today made the UI of the upcoming app.
here's the Code;


//
//  ContentView.swift
//  InstaFilter
//
//  Created by SAJAN  on 17/09/25.
//


import CoreImage
import CoreImage.CIFilterBuiltins
import PhotosUI
import SwiftUI

struct ContentView: View {
    
    @State private var processedImage: Image?
    @State private var filterIntensity = 0.5
    @State private var selectedItem: PhotosPickerItem?
    @State private var currentFilter = CIFilter.sepiaTone()
    let context = CIContext()
    
    var body: some View {
        VStack{
            Spacer()
            
            PhotosPicker(selection: $selectedItem){
                if let processedImage{
                    processedImage
                        .resizable()
                        .scaledToFit()
                } else {
                    ContentUnavailableView("No Picture", systemImage: "photo.badge.plus", description: Text("tap to import the Picture"))
                }
            }
            .onChange(of: selectedItem, LoadImage)
            
            Spacer()
            HStack{
                Text("Intensity")
                Slider(value: $filterIntensity)
                    .onChange(of: filterIntensity, applyProcessing)
            }
            HStack{
                Button("Change Filter", action: changefilter)
                
                Spacer()
                
                // share the picture
            }
        }
        .padding([.horizontal, .bottom])
        .navigationTitle("InstaFilter")
    }
    func changefilter(){
        
    }
    
    func LoadImage(){
        Task{
            guard let imageData = try await selectedItem?.loadTransferable(type: Data.self) else {return}
            guard let inputImage = UIImage(data: imageData) else {return}
            
            
            let BeginImage = CIImage(image: inputImage)
            currentFilter.setValue(BeginImage, forKey: kCIInputImageKey)
            applyProcessing()
        }
    }
    
    func applyProcessing(){
        currentFilter.intensity = Float(filterIntensity)
        
        guard let outputImage = currentFilter.outputImage else {return}
        guard let cgImage = context.createCGImage(outputImage, from: outputImage.extent) else {return}
        
        
        let uiImage = UIImage(cgImage: cgImage)
        processedImage = Image(uiImage: uiImage)
    }
}

#Preview{
    ContentView()
}
